alphabet_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
def to_lowercase(text):
    return text.lower()
def remove_spaces(text):
    new_text = ""
    for char in text:
        if char != " ":
            new_text += char
    return new_text
def group_characters(text):
    groups = []
    group_start = 0
    for i in range(2, len(text), 2):
        groups.append(text[group_start:i])
        group_start = i
    groups.append(text[group_start:])
    return groups
def fill_letter(text):
    k = len(text)
    if k % 2 == 0:
        for i in range(0, k, 2):
            if text[i] == text[i+1]:
                new_word = text[0:i+1] + str('x') + text[i+1:]
                new_word = fill_letter(new_word)
                break
            else:
                new_word = text
    else:
        for i in range(0, k-1, 2):
            if text[i] == text[i+1]:
                new_word = text[0:i+1] + str('x') + text[i+1:]
                new_word = fill_letter(new_word)
                break
            else:
                new_word = text
    return new_word

# Generating the 5x5 key square matrix
def generate_key_matrix(word, alphabet_list):
    key_letters = []
    for char in word:
        if char not in key_letters:
            key_letters.append(char)

    complementary_elements = []
    for char in key_letters:
        if char not in complementary_elements:
            complementary_elements.append(char)
    for char in alphabet_list:
        if char not in complementary_elements:
            complementary_elements.append(char)

    matrix = []
    while complementary_elements != []:
        matrix.append(complementary_elements[:5])
        complementary_elements = complementary_elements[5:]

    return matrix
def search_element(matrix, element):
    for i in range(5):
        for j in range(5):
            if matrix[i][j] == element:
                return i, j
                
def encrypt_row_rule(matrix, e1_row, e1_column, e2_row, e2_column):
    char1 = ''
    if e1_column == 4:
        char1 = matrix[e1_row][0]
    else:
        char1 = matrix[e1_row][e1_column+1]

    char2 = ''
    if e2_column == 4:
        char2 = matrix[e2_row][0]
    else:
        char2 = matrix[e2_row][e2_column+1]

    return char1, char2

def encrypt_column_rule(matrix, e1_row, e1_column, e2_row, e2_column):
    char1 = ''
    if e1_row == 4:
        char1 = matrix[0][e1_column]
    else:
        char1 = matrix[e1_row+1][e1_column]

    char2 = ''
    if e2_row == 4:
        char2 = matrix[0][e2_column]
    else:
        char2 = matrix[e2_row+1][e2_column]

    return char1, char2

def encrypt_rectangle_rule(matrix, e1_row, e1_column, e2_row, e2_column):
    char1 = matrix[e1_row][e2_column]
    char2 = matrix[e2_row][e1_column]

    return char1, char2

def encrypt_playfair_cipher(matrix, plaintext_list):
    cipher_text = []
    for i in range(0, len(plaintext_list)):
        char1 = 0
        char2 = 0
        ele1_x, ele1_y = search_element(matrix, plaintext_list[i][0])
        ele2_x, ele2_y = search_element(matrix, plaintext_list[i][1])

        if ele1_x == ele2_x:
            char1, char2 = encrypt_row_rule(matrix, ele1_x, ele1_y, ele2_x, ele2_y)
        elif ele1_y == ele2_y:
            char1, char2 = encrypt_column_rule(matrix, ele1_x, ele1_y, ele2_x, ele2_y)
        else:
            char1, char2 = encrypt_rectangle_rule(matrix, ele1_x, ele1_y, ele2_x, ele2_y)

        cipher = char1 + char2
        cipher_text.append(cipher)
    return cipher_text

if __name__ == "__main__":
    text_plain = input("Enter the plaintext: ")
    key = input("Enter the key: ")

    text_plain = remove_spaces(to_lowercase(text_plain))
    plaintext_list = group_characters(fill_letter(text_plain))
    if len(plaintext_list[-1]) != 2:
        plaintext_list[-1] = plaintext_list[-1] + 'z'

    key = to_lowercase(key)
    matrix = generate_key_matrix(key, alphabet_list)
    cipher_list = encrypt_playfair_cipher(matrix, plaintext_list)
    cipher_text = "".join(cipher_list)

    print("\nThe Key Matrix:")
    for row in matrix:
        print(row)
    print("\nThe Plain Text:", text_plain)
    print("The Cipher Text:", cipher_text)
